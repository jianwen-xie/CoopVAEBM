from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os
import math
import numpy as np
import scipy.misc
from six.moves import xrange
import tensorflow as tf
from PIL import Image
from model.utils.cifar_loader import CifarDataset
from model.utils.mnist_util import MNISTDataSet

IMG_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.ppm', '.bmp', '.pgm']

def DataSetLoader(self):

    if self.category=="cifar":
        dataset = CifarDataset(os.path.join(self.data_path, 'cifar_dataset', 'cifar-10-batches-py'), shuffle=True,
                          batch_sz=self.batch_size, max_dataset_size=float('inf'))

    elif self.category=="mnist":
        dataset = MNISTDataSet(os.path.join(self.data_path, 'mnist'), MNIST_type=1, train=True, num_images=None,
                             img_width=self.image_size, img_height=self.image_size, shuffle=True, low=-1, high=1, batch_sz=self.batch_size)

    elif self.category == "mnist-fashion":
        dataset = MNISTDataSet(os.path.join(self.data_path, 'mnist'), MNIST_type=2, train=True, num_images=None,
                               img_width=self.image_size, img_height=self.image_size, shuffle=True, low=-1, high=1, batch_sz=self.batch_size)
    else:
        print("No this dataset.")

    return dataset



def mkdir(path, max_depth=3):
    parent, child = os.path.split(path)
    if not os.path.exists(parent) and max_depth > 1:
        mkdir(parent, max_depth-1)

    if not os.path.exists(path):
        os.mkdir(path)


def cell2img(cell_image, image_size=100, margin_syn=2):
    num_cols = cell_image.shape[1] // image_size
    num_rows = cell_image.shape[0] // image_size
    images = np.zeros((num_cols * num_rows, image_size, image_size, 3))
    for ir in range(num_rows):
        for ic in range(num_cols):
            temp = cell_image[ir*(image_size+margin_syn):image_size + ir*(image_size+margin_syn),
                   ic*(image_size+margin_syn):image_size + ic*(image_size+margin_syn),:]
            images[ir*num_cols+ic] = temp
    return images


def clip_by_value(input_, min=0, max=1):
    return np.minimum(max, np.maximum(min, input_))


# def img2cell(images, row_num=10, col_num=10, margin_syn=2):
#     [num_images, image_size] = images.shape[0:2]
#     num_cells = int(math.ceil(num_images / (col_num * row_num)))
#     cell_image = np.zeros((num_cells, row_num * image_size + (row_num-1)*margin_syn,
#                            col_num * image_size + (col_num-1)*margin_syn, images.shape[-1]))
#     for i in range(num_images):
#         cell_id = int(math.floor(i / (col_num * row_num)))
#         idx = i % (col_num * row_num)
#         ir = int(math.floor(idx / col_num))
#         ic = idx % col_num
#         temp = clip_by_value(np.squeeze(images[i]), -1, 1)
#         temp = (temp + 1) / 2 * 255
#         temp = clip_by_value(np.round(temp), min=0, max=255)
#         if len(temp.shape) == 3:
#             gLow = np.min(temp, axis=(0, 1, 2))
#             gHigh = np.max(temp, axis=(0, 1, 2))
#         elif len(temp.shape) == 2:
#             gLow = np.min(temp, axis=(0, 1))
#             gHigh = np.max(temp, axis=(0, 1))
#         temp = (temp - gLow) / (gHigh - gLow)
#         if len(temp.shape) == 2:
#             temp = np.expand_dims(temp, axis=2)
#         cell_image[cell_id, (image_size+margin_syn)*ir:image_size + (image_size+margin_syn)*ir,
#         (image_size+margin_syn)*ic:image_size + (image_size+margin_syn)*ic, :] = temp
#     return cell_image

def img2cell(images, row_num=10, col_num=10, low=-1, high=1, margin_syn=2):
    [num_images, image_size] = images.shape[0:2]
    num_cells = int(math.ceil(num_images / (col_num * row_num)))
    cell_image = np.zeros((num_cells, row_num * image_size + (row_num-1)*margin_syn,
                           col_num * image_size + (col_num-1)*margin_syn, images.shape[3]), dtype=np.uint8)
    for i in range(num_images):
        cell_id = int(math.floor(i / (col_num * row_num)))
        idx = i % (col_num * row_num)
        ir = int(math.floor(idx / col_num))
        ic = idx % col_num
        temp = (images[i] + 1.) * 127.5
        temp = np.clip(temp, 0., 255.)
        # cmin = temp.min()
        # cmax = temp.max()
        # temp = (temp - cmin) / (cmax - cmin)
        cell_image[cell_id, (image_size+margin_syn)*ir:image_size + (image_size+margin_syn)*ir,
                    (image_size+margin_syn)*ic:image_size + (image_size+margin_syn)*ic,:] = temp
    if images.shape[3] == 1:
        cell_image = np.squeeze(cell_image, axis=3)
    return cell_image


def saveSampleResults(sample_results, filename, col_num=10, margin_syn=2):
    cell_image = img2cell(sample_results, col_num, col_num, margin_syn)
    scipy.misc.imsave(filename, np.squeeze(cell_image))